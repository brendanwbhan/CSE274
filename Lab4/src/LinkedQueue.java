// Brendan Han// CSE274// 02/25/2022import java.util.NoSuchElementException;public final class LinkedQueue<E> implements QueueInterface<E> {	//----------------------------------------------------- Inner Node Class	private class Node {		private E data;		private Node next;				private Node(E next) {			this(next, null);		}		private Node(E data, Node next) {			this.data = data;			this.next = next;		}	}	//----------------------------------------------------------------------	//====================================================================== Properties	private Node first;	private Node last;	private int size;		//====================================================================== Constructors	public LinkedQueue() {		clear();	}	//====================================================================== Methods	@Override	public boolean isEmpty() {		if (first == null)			return true;		return false;	}		@Override	public void clear() {		first = last = null; // if first is null last should be null		size = 0;	}		@Override	public int size() {		return size;	}		@Override	public boolean add(E newEntry) {		Node n = new Node(newEntry);		if (isEmpty())			first = last = n;		else {			last.next = n;			last = n;		}		size++;		return true;	}		// Returns null if empty	@Override	public E peek() {		if (isEmpty())			return null;		return first.data;	}		// Throws NoSuchElementException if empty	@Override	public E remove() {		if (isEmpty())			throw new NoSuchElementException();		E temp = first.data;		first = first.next;		size--;				return temp;	}		@Override	public String toString() {		if (size() == 0) return "";		String ret = "";		Node tmp = first;		while (tmp != null) {			ret += "->" + tmp.data;			tmp = tmp.next;		}		return ret.substring(2);	}		//----------------------------------------------- Personal Methods		}